<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Hexo</title>
  
  
  <link href="http://example.com/atom.xml" rel="self"/>
  
  <link href="http://example.com/"/>
  <updated>2022-02-19T06:57:06.921Z</updated>
  <id>http://example.com/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>vue项目打包exe</title>
    <link href="http://example.com/2022/02/19/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85exe/"/>
    <id>http://example.com/2022/02/19/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85exe/</id>
    <published>2022-02-19T06:42:44.660Z</published>
    <updated>2022-02-19T06:57:06.921Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>安装vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure></li><li><p>创建项目vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-vue-project</span><br></pre></td></tr></table></figure></li><li><p>安装electron</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g electron</span><br></pre></td></tr></table></figure></li><li><p>安装electron打包工具</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g electron-packager</span><br></pre></td></tr></table></figure></li></ul><h4 id="打包EXE"><a href="#打包EXE" class="headerlink" title="打包EXE"></a>打包EXE</h4><ol><li><p><code>my-vue-project</code>：找到<code>config/index.js</code>文件；修改 <code>assetsPublicPath</code>的路径；文件中<code>dev</code>和<code>build</code>有两处使用到，请注意修改build处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">...</span><br><span class="line">assetsPublicPath: &#x27;./&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>my-vue-project</code>：打包项目，生存文件夹<code>dist</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p><code>electron</code>：将<code>dist</code>文件夹放在根目录，修改<code>main.js</code>文件，删除<code>index.html</code>文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mainWindow.loadFile(&#x27;dist/index.html&#x27;)</span><br></pre></td></tr></table></figure></li><li><p><code>electron</code>：执行命令运行查看运行效果</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run start</span><br></pre></td></tr></table></figure><p>此时应该可以看到vue项目变成了exe文件的形式在运行</p></li><li><p><code>electron</code>：下载打包所需的依赖</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install electron-packager --save-dev</span><br></pre></td></tr></table></figure></li><li><p><code>electron</code>：打开<code>package.json</code>，在<code>scripts</code>中添加打包命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123; </span><br><span class="line">&quot;start&quot;: &quot;electron .&quot;, </span><br><span class="line">&quot;packager&quot;: &quot;electron-packager ./ App --platform=win32 --arch=x64 --overwrite&quot;//此处为添加命令</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果你想修改最后打包出来的exe文件图标，类似于favicon，或者EXE的名字，可以设置 packager 的指令内容为，icon的路径自己调整下，更多配置内容请查阅文档： </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;packager&quot;: &quot;electron-packager ./ YOUR_APP_NAME --platform=win32 --arch=x64 --icon=./dist/favicon.ico --overwrite&quot; </span><br></pre></td></tr></table></figure></li><li><p><code>electron</code>：打包项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run packager</span><br></pre></td></tr></table></figure><p>到此，就生成了EXE的可执行文件，但是是一个文件夹，需要进行整个文件夹的压缩封装</p></li></ol><h4 id="生成EXE安装程序"><a href="#生成EXE安装程序" class="headerlink" title="生成EXE安装程序"></a>生成EXE安装程序</h4><p> InnoSetup下载、安装、打包</p><p> <a href="https://www.cnblogs.com/benpaodejiandan/p/7081011.html">开源Inno Setup官网下载、安装、打包教程（官网安装向导中文语言包） - 奔跑的简单 - 博客园 (cnblogs.com)</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装vue&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
  </entry>
  
  <entry>
    <title>vue项目打包apk</title>
    <link href="http://example.com/2022/02/19/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85apk/"/>
    <id>http://example.com/2022/02/19/vue%E9%A1%B9%E7%9B%AE%E6%89%93%E5%8C%85apk/</id>
    <published>2022-02-19T06:42:44.654Z</published>
    <updated>2022-02-19T06:57:17.610Z</updated>
    
    <content type="html"><![CDATA[<h4 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h4><ul><li><p>安装vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g @vue/cli</span><br><span class="line">npm install -g @vue/cli-init</span><br></pre></td></tr></table></figure></li><li><p>创建项目vue</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue init webpack my-vue-project</span><br></pre></td></tr></table></figure></li><li><p>安装cordova相关</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cordova</span><br></pre></td></tr></table></figure></li></ul><h4 id="cordova项目内打包"><a href="#cordova项目内打包" class="headerlink" title="cordova项目内打包"></a>cordova项目内打包</h4><ol><li><p><code>my-vue-project</code>：找到<code>config/index.js</code>文件；修改 <code>assetsPublicPath</code>的路径；文件中<code>dev</code>和<code>build</code>有两处使用到，请注意修改build处</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">...</span><br><span class="line">assetsPublicPath: &#x27;./&#x27;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p><code>my-vue-project</code>：打包项目，生存文件夹<code>dist</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure></li><li><p><code>cordova</code>：创建cordova项目，new-cordova是项目名称，com.my.vue2apk是包名，vue2apk是程序的标题</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova create new-cordova com.my.vue2apk vue2apk</span><br></pre></td></tr></table></figure></li><li><p><code>cordova</code>：将刚才在vue项目中打包生成的dist文件夹下面的index.html和static文件夹复制到www文件夹下面，将原先www文件夹下面的所有文件删除。</p></li><li><p><code>cordova</code>：打包cordova项目</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova platforms add android --save</span><br></pre></td></tr></table></figure></li><li><p><code>cordova</code>：生成apk文件</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cordova build android</span><br></pre></td></tr></table></figure><p>此时生成的文件就可以正常在模拟器安装，但是缺少了签名，之后需要进行签名生成重新打包，在此不做深究</p></li></ol><h4 id="引用"><a href="#引用" class="headerlink" title="引用"></a>引用</h4><blockquote><p> <a href="https://blog.csdn.net/qq_21963133/article/details/88546086">前端VUE项目打包成安卓APP_氵易风灬的博客-CSDN博客_vue打包成app</a> </p></blockquote>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;准备工作&quot;&gt;&lt;a href=&quot;#准备工作&quot; class=&quot;headerlink&quot; title=&quot;准备工作&quot;&gt;&lt;/a&gt;准备工作&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装vue&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;</summary>
      
    
    
    
    <category term="VUE" scheme="http://example.com/categories/VUE/"/>
    
    
  </entry>
  
  <entry>
    <title>2022新年flag</title>
    <link href="http://example.com/2022/02/19/2022%E6%96%B0%E5%B9%B4flag/"/>
    <id>http://example.com/2022/02/19/2022%E6%96%B0%E5%B9%B4flag/</id>
    <published>2022-02-19T06:41:38.511Z</published>
    <updated>2022-02-19T06:54:23.982Z</updated>
    
    <content type="html"><![CDATA[<ol><li>工作：一个满意的双休</li><li>存款：15万，年底攒够首付</li><li>旅游：1次</li><li>算法：LeetCode200道</li><li>锻炼：长胖20斤</li><li>看书：5本</li><li>项目：5个，小游戏或者app都行</li><li>理财：开个股票账户2000块试水，基金5%收益</li><li>电脑：配个电脑</li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;ol&gt;
&lt;li&gt;工作：一个满意的双休&lt;/li&gt;
&lt;li&gt;存款：15万，年底攒够首付&lt;/li&gt;
&lt;li&gt;旅游：1次&lt;/li&gt;
&lt;li&gt;算法：LeetCode200道&lt;/li&gt;
&lt;li&gt;锻炼：长胖20斤&lt;/li&gt;
&lt;li&gt;看书：5本&lt;/li&gt;
&lt;li&gt;项目：5个，小游戏或者app都</summary>
      
    
    
    
    <category term="生活记录" scheme="http://example.com/categories/%E7%94%9F%E6%B4%BB%E8%AE%B0%E5%BD%95/"/>
    
    
  </entry>
  
  <entry>
    <title>个人博客捣鼓总结</title>
    <link href="http://example.com/2022/02/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8D%A3%E9%BC%93%E6%80%BB%E7%BB%93/"/>
    <id>http://example.com/2022/02/19/%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%E6%8D%A3%E9%BC%93%E6%80%BB%E7%BB%93/</id>
    <published>2022-02-19T06:41:38.501Z</published>
    <updated>2022-02-19T07:00:08.240Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Jekyll"><a href="#Jekyll" class="headerlink" title="Jekyll"></a>Jekyll</h4><p>Github原生支持自动编译，很方便，但是缺点也有，个人最开始使用，最后想换其他的。<br>只需要直接仓库中提交你所编写的Markdown文件即可，Github会进行自动编译，很方便，你只需要提交文件即可，不需要运行任何命令行等等，不需要本地电脑下载各种软件环境配置等等，纯免费</p><hr><h4 id="Hexo"><a href="#Hexo" class="headerlink" title="Hexo"></a>Hexo</h4><p>当时是遇到Jekyll对于Markdown编写的文件会去进行编译检查啥的，反正就是我的文件中，因为代码引用比较频繁，遇到了一些语法，但是Jekyll编译失败，找了一下解决方案，要么改文件，要么很麻烦不好弄，所以弃用，选择Hexo<br>选择了Hexo之后，发现其实他也有这样的问题，但是已经开始捣鼓了，就继续进行研究了一番。<br>个人感觉很麻烦，你最好需要本地安装软件环境，编写Markdown文件之后，需要进行命令行操作，然后生成了静态网页，会关联到你的Github上更新（当然也有可视化的界面不用命令行）<br>需要本地环境部署软件，突然到新的电脑，需要又进行部署比较烦（当然网上有人部署在自己服务器或者其他的方式，但是很烦，也好复杂）</p><hr><h4 id="Typecho"><a href="#Typecho" class="headerlink" title="Typecho"></a>Typecho</h4><p>想要拥有一款随时随地有浏览器就行，就可以编写上传查看自己的文档，类似简书这种，但是用的自己的服务器网址等等，个人还超级喜欢简洁的风格，后期可能自己想要进行一些threejs的3D网站风格改写，所以看到了Typecho，蛮合适的，但是得自己买个服务器，操作其实不太复杂<br>暂时想了想，还是继续在简书写好了，但是后续肯定是要有自己的小窝的，慢慢来</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;Jekyll&quot;&gt;&lt;a href=&quot;#Jekyll&quot; class=&quot;headerlink&quot; title=&quot;Jekyll&quot;&gt;&lt;/a&gt;Jekyll&lt;/h4&gt;&lt;p&gt;Github原生支持自动编译，很方便，但是缺点也有，个人最开始使用，最后想换其他的。&lt;br&gt;只需要直接仓库中</summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Git命令行</title>
    <link href="http://example.com/2022/02/19/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    <id>http://example.com/2022/02/19/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/</id>
    <published>2022-02-19T06:41:38.500Z</published>
    <updated>2022-02-19T07:08:15.724Z</updated>
    
    <content type="html"><![CDATA[<h4 id="简单操作"><a href="#简单操作" class="headerlink" title="简单操作"></a>简单操作</h4><ol><li><p>提交：git commit</p></li><li><p>创建分支：git branch bugFix</p></li><li><p>切换分支：git checkout bugFix</p></li><li><p>创建并切换分支： git checkout -b bugFix </p></li><li><p>合并分支：</p><ul><li>git merge bugFix，先切换到main分支，然后将bugFix合并过来</li><li>git rebase main，先切换到bugFix分支，然后rebase主分支到bugFix分支，这样bugFix的提交记录就都在main的之后了</li><li>git rebase main bugFix：不管当前HEAD是在哪都行，相当于先切换到bugFix分支，再进行与main分支合并</li></ul></li></ol><hr><h4 id="一些特性"><a href="#一些特性" class="headerlink" title="一些特性"></a>一些特性</h4><ol><li><p>HEAD：</p><ul><li><p>Git实际上维护的是一串历史记录，每个历史标号都是一条记录的id</p></li><li><p>不同的分支表示不同的指针，指向某一个历史标号，沿着那个标号往前，可以查看所有的历史记录，每一个分支有自己的指针，例如main，bugFix</p></li><li><p>HEAD也是一个指针，只是我们经常情况下将其和分支指针指向同一个历史记录</p></li><li><p>git checkout bugFix：切换分支</p><p> git checkout commitId：HEAD指针指向某一个提交记录</p></li></ul><p>使用场景：省却了建分支删分支的很多麻烦</p><ul><li>如果临时想基于某个commit做变更，试试新方案是否可行，就可以采用分离头指针的方式。测试后发现新方案不成熟，直接reset回其他分支即可，省去了建、删分支的麻烦，git会忽略管理这个没有分支commit</li><li>进行到某个commit，试试新方案，为该commit建立新的branch，可以进行特性开发</li><li>分离头指针对应的commit，你如果认为有用需要保留，那就用新分支把它保留</li><li>如果当下无master分支，可以在分离头指针状态下，git checkout -b master HEAD</li></ul></li><li><p>相对引用：</p><ul><li>git checkout commitId 这种方式不太方便，因为commitId会很长，当然可以提交commitId的前几个字符也可以完全匹配到</li><li>使用相对引用，会从HEAD或者bugFix分支开始计算<ul><li>使用 ^ 向上移动 1 个提交记录，main^</li><li>使用 ~ 向上移动多个提交记录，bugFix ~3，要是不加数字，默认向上 1 个</li></ul></li></ul><p>使用场景：移动分支</p><ul><li>git branch -f main HEAD~3：将main分支强制指向HEAD的前3次提交</li></ul></li><li><p>撤销变更：</p><ul><li><p>git reset HEAD~1：（git reset commitId） 通过把分支记录回退几个提交记录来实现撤销改动。git reset 向上移动分支，原来指向的提交记录就跟从来没有提交过一样</p></li><li><p>在reset后， 之前所做的变更还在，但是处于未加入暂存区状态</p></li><li><p>虽然在你的本地分支中使用 git reset 很方便，但是这种“改写历史”的方法对大家一起使用的远程分支是无效的</p></li></ul></li></ol><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/1.png" alt="image.png"></p><ul><li><p>git revert HEAD~1：（git revert commitId）在我们要撤销的提交记录后面多了一个新提交</p></li><li><p>新提交记录 <code>C2&#39;</code> 引入了更改，刚好用来撤销 <code>C2</code> 这个提交。也就是说 <code>C2&#39;</code> 的状态与 <code>C1</code> 是相同的</p></li></ul><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/2.png" alt="image.png"></p><hr><h4 id="自由修改提交树"><a href="#自由修改提交树" class="headerlink" title="自由修改提交树"></a>自由修改提交树</h4><ol><li><p>git cherry-pick commitId：将一些提交复制到当前所在的位置（<code>HEAD</code>）下面</p></li><li><p>git rebase -i HEAD~1：交互式rebase，可以打开UI界面自由选择想要复制rebase的记录，并且随意选择部分删除部分排序等</p></li></ol><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/3.png" alt="image.png"></p><hr><h4 id="技巧贴士集合"><a href="#技巧贴士集合" class="headerlink" title="技巧贴士集合"></a>技巧贴士集合</h4><ol><li><p>只提取一个提交记录：开发中寻找bug时，会提交一些打印信息的记录，之后修复了bug，只提取修复bug的记录到主分支</p><ul><li>git cherry-pick commitId：</li><li>git rebase -i HEAD：</li></ul></li><li><p>标签：</p><ul><li>git tag v1 C1：（如果未指定C1，会默认HEAD位置）</li></ul></li></ol><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/4.png" alt="image.png"></p><ul><li><p>git describe ref：描述离你最近的标签引用</p><p>&lt; tag &gt; _ &lt; num &gt; _ g&lt; hash &gt;：tag表示离ref最近的标签，num表示ref和tag相差几个记录，hash是ref的hash值前几位</p></li></ul><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/5.png" alt="image.png"></p><ol><li>git checkout main：假设默认正上方的记录是第一个父记录</li></ol><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/6.png" alt="image.png"></p><p>   git checkout main^2：假设默认正上方的记录是第一个父记录，会到另一个父记录</p><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/7.png" alt="image.png"></p><p>   git checkout HEAD ~ ^ 2 ~ 2：链式操作</p><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/8.png" alt="image.png"></p><hr><h4 id="远程仓库"><a href="#远程仓库" class="headerlink" title="远程仓库"></a>远程仓库</h4><ol><li><p>git fetch：实际上将本地仓库中的远程分支更新成了远程仓库相应分支最新的状态 </p><ul><li>从远程仓库下载本地仓库中缺失的提交记录</li><li>更新本地仓库中的远程分支指针（origin&#x2F;main）</li><li>不会改变你本地仓库的状态，不会更新你的（main）分支，也不会修改你磁盘上的文件</li></ul></li><li><p>git pull：git fetch + git merge origin&#x2F;main</p><p>git pull –rebase：git fetch + git rebase origin&#x2F;main</p></li><li><p>git push：推送</p></li></ol><hr><h4 id="远程技巧"><a href="#远程技巧" class="headerlink" title="远程技巧"></a>远程技巧</h4><ol><li><p>rebase： 仁者见仁，智者见智</p><ul><li><p>优点： 使你的提交树变得很干净, 所有的提交都在一条线上</p></li><li><p>缺点： 修改了提交树的历史</p></li></ul></li></ol><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/9.png" alt="rebase.png"></p><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/10.png" alt="merge.png"></p><ol start="2"><li><p>远程跟踪： remote tracking</p><ul><li><p>当你克隆时, Git 会为远程仓库中的每个分支在本地仓库中创建一个远程分支（比如 o&#x2F;main）。然后再创建一个跟踪远程仓库中活动分支的本地分支，默认情况下这个本地分支会被命名为 main。 </p></li><li><p>main 和 o&#x2F;main 的关联关系就是由分支的“remote tracking”属性决定的。main 被设定为跟踪 o&#x2F;main —— 这意味着为 main 分支指定了推送的目的地以及拉取后合并的目标。 </p></li><li><p>你可以让任意分支跟踪 o&#x2F;main, 然后该分支会像 main 分支一样得到隐含的 push 目的地以及 merge 的目标。 这意味着你可以在分支 totallyNotMain 上执行 git push，将工作推送到远程仓库的 main 分支上。 </p></li><li><p>有两种方法设置这个属性，第一种就是通过远程分支检出一个新的分支，执行:<br>git checkout -b totallyNotMain o&#x2F;main</p><p>就可以创建一个名为 totallyNotMain 的分支，它跟踪远程分支 o&#x2F;main。</p></li><li><p>另一种设置远程追踪分支的方法就是使用：git branch -u 命令，执行：</p><p>git branch -u o&#x2F;main foo</p><p>这样 foo就会跟踪 o&#x2F;main 了。如果当前就在 foo 分支上, 还可以省略 foo：</p><p>git branch -u o&#x2F;main</p></li></ul></li><li><p>git push &lt; remote &gt;  &lt; place &gt;： </p><ul><li>git push origin main</li></ul></li></ol><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/11.png" alt="rebase.png"></p><p><img src="/../articles_img/Git%E5%91%BD%E4%BB%A4%E8%A1%8C/12.png" alt="rebase.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;简单操作&quot;&gt;&lt;a href=&quot;#简单操作&quot; class=&quot;headerlink&quot; title=&quot;简单操作&quot;&gt;&lt;/a&gt;简单操作&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;提交：git commit&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;创建分支：git branch bugFix</summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Net</title>
    <link href="http://example.com/2022/02/19/Net/"/>
    <id>http://example.com/2022/02/19/Net/</id>
    <published>2022-02-19T06:41:38.499Z</published>
    <updated>2022-02-19T06:57:36.701Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>关于网络的一些基础常识</p><hr><h4 id="四大请求"><a href="#四大请求" class="headerlink" title="四大请求"></a>四大请求</h4><ul><li>GET：search，向数据库发送请求索取数据，不会增加修改数据，不会影响数据库内容</li><li>PUT：update，向数据库发送请求改变数据，修改的是某个具体资源的内容，不会增加数据种类</li><li>POST：insert，向数据库发送请求改变数据，但是会创建新的内容，多出一个东西</li><li>DELETE：delete，向数据库发送删除请求</li></ul><p><strong>注意：</strong> PUT主要作用于一个具体的资源上（url&#x2F;xxx），POST主要是一个集合资源上（url）</p><hr><h4 id="数字证书"><a href="#数字证书" class="headerlink" title="数字证书"></a>数字证书</h4><p>数字证书相当于互联网通讯的驾驶执照，用来识别身份，最简单的数字证书包含一个公钥、名称以及证书授权机构的数字签名</p><h4 id="数字签名"><a href="#数字签名" class="headerlink" title="数字签名"></a>数字签名</h4><p>一段报文，被发送者用私钥加密，再连同原报文一起的新的报文，就是数字签名</p><p><a href="https://blog.csdn.net/hcm_0079/article/details/84980928">https://blog.csdn.net/hcm_0079/article/details/84980928</a></p><hr><h4 id="X509"><a href="#X509" class="headerlink" title="X509"></a>X509</h4><p>X509是密码学里公钥证书的格式标准，规定了证书可以包含的信息以及格式</p><p>X509证书包含公钥、身份信息和签名信息</p><hr><h4 id="Http与Https"><a href="#Http与Https" class="headerlink" title="Http与Https"></a>Http与Https</h4><p>Https相当于Http+SSL，是更为安全的传输协议，传输过程中都是被加密的密文信息</p><p>Http传输的都是明文信息</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;关于网络的一些基础常识&lt;/p&gt;
&lt;hr&gt;
&lt;h4 id=&quot;四大请求&quot;&gt;&lt;a href=&quot;#四大请求&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>开源协议</title>
    <link href="http://example.com/2022/02/19/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/"/>
    <id>http://example.com/2022/02/19/%E5%BC%80%E6%BA%90%E5%8D%8F%E8%AE%AE/</id>
    <published>2022-02-19T06:41:38.499Z</published>
    <updated>2022-02-19T06:59:57.795Z</updated>
    
    <content type="html"><![CDATA[<p>在进行开源软件选型时，需要留意一下开源协议，开源选件往往可以免费使用，但不意味着随意使用，根据你的用途，协议的要求会对你产生一定的影响。截止到写稿时，经过OSI（Open Source Initiative）组织批准的开源协议就有82种之多，可以参见：在进行开源软件选型时，需要留意一下开源协议，开源选件往往可以免费使用，但不意味着随意使用，根据你的用途，协议的要求会对你产生一定的影响。截止到写稿时，经过OSI（Open Source Initiative）组织批准的开源协议就有82种之多，可以参见：<a href="https://opensource.org/licenses/alphabetical%E3%80%82">https://opensource.org/licenses/alphabetical。</a></p><p>我们常见的开源协议有以下几种：</p><ul><li>GPL许可：是 GNU General Public License 的缩写，既GNU通用公共许可协议，是自由软件基金会（GNU）发布的一个软件首选许可，GPL许可一共发布的三个不版本，最新一版是2007年公布的GPLv3，最著名的使用GPL许可的软件就是大Linux。GPL许可的特点就是，使用GPL软件(包括类库)或者源代码（不管多少）的发布的新产品（包括新增源代码和可执行二进制文件）也必须使用GPL协议，也要公开源代码。由于这个许可具有一定的开源强制性，很多大公司对GPL许可的开源软件的选择还是比较谨慎的。GPL 协议有很多变种：比如LGPL, AGPL</li><li>LGPL : LGPL 是 GNU Lesser General Public License 的缩写 既GNU宽通用公共许可证，相比于GPL，其开源强制性弱一些，对商用软件更加友好，使用该许可的著名软件是Linux下的办公软件 OpenOffice。按照该许可协议的要求，以类库方式引入基于LGPL许可的软件可以不开源其衍生产品的源代码，单对于LGPL许可授权的源代码进行修改或者和修改相关的衍生代码则必须开源且使用LGPL许可进行授权。</li><li>AGPL：Affero General Public License，简称Affero GPL或AGPL，Affero 是一家公司名称，AGPL最初由该公司撰写，改许可是相当于GPL的增强版本，主要是对通过网络发布服务进行限制。GPL许可本身限制的是软件的“发布”行为，只要是使用了GPL许可的源代码或者二进制文件，必须开源且以同样以GPL许可进行授权，但到了互联网十点，很多互联网公司并不发布软件实体，而是提供“服务”，所以GPL的约束力就明显下降了，AGPL许可的目的就是填补这个所谓的“漏洞”，改许可要求，除了GPL本身的约束以外，所有基于AGPL许可软件提供网络服务，其相关源代码必须开源，所以在AGPL许可下，网络服务也被看做一种分发形式。所以很多互联网公司禁止使用 AGPL 许可的开源软件。</li><li>BSD许可：BSD（BSD是Berkly Software Distribution的简写）许可最初使用在加州大学伯克利分校发布的 BSD Unix 系统上，随着BSD系统的发展，BSD许可也随之沿用下来。相比于GPL 和 MPL 的严格要求，BSD 许可的的要求就非常宽松，给予使用者非常大的自由度。在该许可下的软件可以自由使用修改，也可以将修改后的代码再次发布，而且可以是按照闭源的私有软件进行发布，只需要在发布的软件和中保留BSD许可协议文件即可，但未经许可不能使用原作者或者机构名义进行宣传和推广。</li><li>MPL许可：MPL是 The Mozilla Public License 的做些。是1998年初Netscape的 Mozilla小组为其开源软件项目设计的软件许可证。MPL许可允许经过MPL授权的源代码和其他授权的文件（包括源代码和二进制文件）混合使用，甚至剥和私有软件混合使用，这相当于GPL许可和BSD或类似许可的折中，其既有一定的开源强制性，又保留一定的私有权利。按照该许可要求，使用基于MPL授权源代码的部分，包括对MPL源代码的修改部分，必须保持MPL授权，这一点和GPL协议类似，但新增代码发布的可使用其他方式授权，甚至是私有授权，也可以比闭源的方式。</li><li>MIT 许可：MIT 许可是来自麻省理工学院（Massachusetts Institute of Technology, MIT），该许可被认为是最自由的开源协议之一，也是应用最为广泛的开源协议(据blackduck——一家对软件源代码进行合规审计的公司，统计，全球有将近1&#x2F;3的开源软件使用MIT开源协议)，他的协议声明非常简短，他和BSD许可类似，允许自由修改发布基于MIT的代码和软件，只需要你的发行版里包含原始协议文件即可，其他无任何限制，及时使用原始作者的名义进行推广。使用MIT许可的著名软件有ssh 客户端软件jquery,Rails，putty 和 xwindows等。</li><li>Apache 2.0许可：改协议是由Apache软件基金会发布的许可，最初用在像Apache web Server这样Apache的内部软件中，2004年公布了2.0版本。其限制条件和BSD类似，允许自由修改和使用、发布软件，但要求保留版权，相比于BSD许可，该许可对版权要求的更细，每一个被修改后的原始文件都要著名原始版权声明。使用 Apache 2.0许可 著名的软件有 Android ,Apache web server，swift 等。</li></ul><p>很多互利网公司禁止使用 AGPL，以和气类似的开源许可（CPAL，OSL），甚至用GPL，LGPL，MPL（如果仅仅是内部使用，不以软件分发的形式出现，也可以自由使用），推荐使用BSD，APache 2.0 和 MIT 许可。</p><hr><p>开源软件也不是免费的午餐，开源许可使用不当也可能引起官司，比如下面的例子：</p><p>2007 年 Skype 公司被发现再其网络语音手持电话的固件中使用了Linux内核代码，Linux是基于GPL许可的，按照协议规定，skype 必须向售卖该产品的用户免费提供固件源代码。但skype并没有这么做，只有在2007年2月被告上法庭，并被一德国法庭判有罪。（<a href="http://www.cnbeta.com/articles/tech/55365.htm%EF%BC%8Chttp://www.groklaw.net/article.php?story=20080508212535665%EF%BC%89">http://www.cnbeta.com/articles/tech/55365.htm，http://www.groklaw.net/article.php?story=20080508212535665）</a></p><p>2008 年12月11日，自由软件基金会（FSF）将著名网络设备生产商Cisco 告上法庭，由于思科公司旗下品牌 Linksys 下的诸多产品使用了包括 Gcc ,GNU binutils 和 GNU C 库，这些软件多数是基于GPL或LGPL许可的，但思科公司并未按照许可要求公开相关产品的源代码。（<a href="https://en.wikipedia.org/wiki/Free_Software_Foundation,_Inc._v._Cisco_Systems,_Inc.%EF%BC%89">https://en.wikipedia.org/wiki/Free_Software_Foundation,_Inc._v._Cisco_Systems,_Inc.）</a></p><p>可见，即使是也有“帆船”的时候，要么是影响公司声誉，要们是被迫开放源代码，正所谓填下没有免费的午餐，选在开源软件时不要以为免费就拿来就用，一定要仔细审查开源协议是否符合你的产品要求。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在进行开源软件选型时，需要留意一下开源协议，开源选件往往可以免费使用，但不意味着随意使用，根据你的用途，协议的要求会对你产生一定的影响。截止到写稿时，经过OSI（Open Source Initiative）组织批准的开源协议就有82种之多，可以参见：在进行开源软件选型时，</summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>版本管理规范-语义化版本</title>
    <link href="http://example.com/2022/02/19/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/"/>
    <id>http://example.com/2022/02/19/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83-%E8%AF%AD%E4%B9%89%E5%8C%96%E7%89%88%E6%9C%AC/</id>
    <published>2022-02-19T06:41:38.497Z</published>
    <updated>2022-02-19T06:54:51.729Z</updated>
    
    <content type="html"><![CDATA[<h5 id="摘要"><a href="#摘要" class="headerlink" title="摘要"></a>摘要</h5><p>版本格式：主版本号.次版本号.修订号，版本号递增规则如下：</p><ul><li>主版本号：当你做了不兼容的API 修改。</li><li>次版本号：当你做了向下兼容的功能性新增。（包括重构、性能优化等）</li><li>修订号：当你做了向下兼容的问题修正。</li></ul><p>先行版本号及版本编译信息可以加到“主版本号.次版本号.修订号”的后面，作为延伸。</p><hr><p>正式版本号是 <code>1.0.0</code> </p><p>预发版本号 <code>0.1.0</code> 或 <code>0.0.0</code>，个人更建议使用 <code>0.1.0</code>，因为 <code>0.0.*</code> 还可以预留给更特殊的目的</p><hr><p>优先级：</p><ul><li>有相同主版本号、次版本号及修订号的两个先行版本号，其优先层级“必须MUST”透过由左到右的每个被句点分隔的标识符号来比较，直到找到一个差异值后决定</li><li>只有数字的标识符号以数值高低比较，有字母或连接号时则逐字以ASCII的排序来比较</li><li>数字的标识符号比非数字的标识符号优先层级低</li><li>若开头的标识符号都相同时，栏位比较多的先行版本号优先层级比较高</li></ul><p>范例：<code>1.0.0-alpha</code> &lt; <code>1.0.0-alpha.1</code> &lt; <code>1.0.0-alpha.beta</code> &lt; <code>1.0.0-beta</code> &lt;<code>1.0.0-beta.2</code>&lt; <code>1.0.0-beta.11</code> &lt; <code>1.0.0- rc.1</code> &lt;<code>1.0.0</code>。 </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h5 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h5&gt;&lt;p&gt;版本格式：主版本号.次版本号.修订号，版本号递增规则如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;主版本号：当你做了不兼容的API 修改。&lt;/li&gt;
&lt;</summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Git分支管理规范</title>
    <link href="http://example.com/2022/02/19/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/"/>
    <id>http://example.com/2022/02/19/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/</id>
    <published>2022-02-19T06:41:38.497Z</published>
    <updated>2022-02-19T07:09:25.030Z</updated>
    
    <content type="html"><![CDATA[<h4 id="常设分支：永久不删除"><a href="#常设分支：永久不删除" class="headerlink" title="常设分支：永久不删除"></a>常设分支：永久不删除</h4><ol><li>master：生产环境的稳定分支，构建生产环境<ul><li>仅用来发布新版本，除了从 release 测试分支或 hotfix-* Bug修复分支进行merge，不接受任何其它修改。</li><li>master分支上存放的应该是随时可供在生产环境中部署的代码</li><li>每一次更新，最好添加对应的版本号标签。</li></ul></li><li>develop：开发环境的稳定分支，公共开发环境基于该分支构建<ul><li>develop分支来源于feature、release、hotfix-*分支。</li></ul></li></ol><h4 id="临时分支：用完立即删除"><a href="#临时分支：用完立即删除" class="headerlink" title="临时分支：用完立即删除"></a>临时分支：用完立即删除</h4><ol><li><p>feature-* ：功能分支，是为了开发某个特定功能，从 develop 分支上面分出来的。开发完成后，要merge到 develop 分支。</p><ul><li>功能分支的命名，采用 feature-* 的形式命名( * 为任务单号)</li></ul></li><li><p>release ：测试环境的稳定分支，本分支是从develop分支派生出来的</p><ul><li>测试人员在该分支进行测试并提交Bug,开发人员基于该分支派生的bugfix-*分支进行bug修复，最终再合并回release分支，待测试完成，该分支必须合并回develop分支和master分支。</li></ul></li><li><p>bugfix-* ：测试阶段修复Bug用此类分支命名，该分支是为了修复某个bug，从 release 分支上面分出来的。修复完成后，再合并回 release 分支。</p><ul><li>Bug修复分支的命名，采用 bugfix-* 的形式命名（*为bug单号）</li></ul></li><li><p>hotfix-* ：线上出现的紧急Bug，需要及时修复用此类分支命名，从 master 分支切换出来的分支，修复之后合并回 master 和 develop 。</p></li></ol><hr><h4 id="正常开发流程"><a href="#正常开发流程" class="headerlink" title="正常开发流程"></a>正常开发流程</h4><ol><li><p>从 develop 分支切出多个命名为 feature-*  分支开发新功能。</p></li><li><p>开发者完成开发，提交分支到远程仓库。</p></li><li><p>开发者发起merge请求（可在gitlab页面“New merge request”），将新分支请求merge到 develop 分支，并提醒code reviewer进行review</p></li><li><p>code reviewer对代码review之后，若无问题，则接受merge请求，新分支merge到 develop 分支，同时可删除新建分支；若有问题，则不能进行merge，可close该请求，同时通知开发者在新分支上进行相应调整。调整完后提交代码重复review流程。</p></li><li><p>转测时，直接从当前 develop 分支merge到 release 分支，重新构建测试环境完成转测。</p></li><li><p>测试完成后，从release分支merge到 master 分支，基于 master 分支构建生产环境完成上线。并对 master 分支打tag，tag名可为v1.0.0_2019032115（即版本号_上线时间）</p></li></ol><p><img src="/../articles_img/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/1.png" alt="image.png"></p><h4 id="生产环境Bug修复流程"><a href="#生产环境Bug修复流程" class="headerlink" title="生产环境Bug修复流程"></a>生产环境Bug修复流程</h4><ol><li>非紧急Bug或优化 ：非关键业务流程问题，仅影响用户使用体验，或出现频率较小等，为非紧急Bug，可规划到后续版本进行修复 <ul><li>参考“正常开发流程”</li></ul></li><li>紧急Bug ： 严重影响用户使用的为紧急Bug，需立即进行修复。如关键业务流程存在问题，影响用户正常的业务行为<ul><li>从 master 分支切出一个bug修复分支，完成之后需要同时merge到 master 分支与 develop 分支 </li><li>如果需要测试介入验证，则可先merge到 release 分支，验证通过后再merge到 master 分支上线</li></ul></li></ol><p><img src="/../articles_img/Git%E5%88%86%E6%94%AF%E7%AE%A1%E7%90%86%E8%A7%84%E8%8C%83/2.png" alt="image.png"></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;常设分支：永久不删除&quot;&gt;&lt;a href=&quot;#常设分支：永久不删除&quot; class=&quot;headerlink&quot; title=&quot;常设分支：永久不删除&quot;&gt;&lt;/a&gt;常设分支：永久不删除&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;master：生产环境的稳定分支，构建生产环境&lt;ul&gt;
&lt;li&gt;</summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="http://example.com/2022/02/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>http://example.com/2022/02/19/%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/</id>
    <published>2022-02-19T06:41:38.497Z</published>
    <updated>2022-02-19T06:59:54.054Z</updated>
    
    <content type="html"><![CDATA[<h4 id="元字符"><a href="#元字符" class="headerlink" title="元字符"></a>元字符</h4><table><thead><tr><th align="left">常用的元字符</th><th>说明</th></tr></thead><tbody><tr><td align="left">.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td align="left">\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td align="left">\s</td><td>匹配任意的空白符</td></tr><tr><td align="left">\d</td><td>匹配数字</td></tr><tr><td align="left">\b</td><td>匹配单词的开始或结束</td></tr><tr><td align="left">^</td><td>匹配字符串的开始</td></tr><tr><td align="left">$</td><td>匹配字符串的结束</td></tr></tbody></table><ul><li><code>\bhi\b</code>: 由两个字符组成，前一个字符是h,后一个是i</li><li><code>\bhi\b.*\bLucy\b</code>: 先是一个单词hi,然后是任意个任意字符(但不能是换行)，最后是Lucy这个单词 </li><li><code>0\d&#123;2&#125;-\d&#123;8&#125;</code>: 以0开头，然后是两个数字，然后是一个连字号“-”，最后是8个数字 </li><li><code>\ba\w*\b</code>: 以字母a开头的单词——先是某个单词开始处(\b)，然后是字母a,然后是任意数量的字母或数字(\w*)，最后是单词结束处(\b) </li><li><code>\d+</code>: 1个或更多连续的数字, 这里的+是和类似的元字符，不同的是*匹配重复任意次(可能是0次)，而+则匹配重复1次或更多次</li><li><code> \b\w&#123;6&#125;\b</code> :匹配刚好6个字符的单词</li><li><code>^\d&#123;5,12&#125;$</code>: 5到12个数字</li></ul><h4 id="转义字符"><a href="#转义字符" class="headerlink" title="转义字符"></a>转义字符</h4><p>如果你想查找元字符本身的话，比如你查找.,或者*,就出现了问题：你没办法指定它们，因为它们会被解释成别的意思。这时你就得使用\来取消这些字符的特殊意义</p><ul><li><code>deerchao\.cn</code> : 匹配<code>deerchao.cn</code></li><li><code>C:\\Windows</code>: <code>C:\Windows </code></li></ul><h4 id="限定符"><a href="#限定符" class="headerlink" title="限定符"></a>限定符</h4><table><thead><tr><th align="left">常用的限定符</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">*</td><td align="left">重复零次或更多次</td></tr><tr><td align="left">+</td><td align="left">重复一次或更多次</td></tr><tr><td align="left">?</td><td align="left">重复零次或一次</td></tr><tr><td align="left">{n}</td><td align="left">重复n次</td></tr><tr><td align="left">{n,}</td><td align="left">重复n次或更多次</td></tr><tr><td align="left">{n,m}</td><td align="left">重复n到m次</td></tr></tbody></table><ul><li><code>Windows\d+</code>: 匹配Windows后面跟1个或更多数字</li></ul><h4 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h4><p> <code>[aeiou]</code>就匹配任何一个英文元音字母，<code>[.?!]</code>匹配标点符号(.或?或!) ，<code>[]</code>中括号中代表任意一个都行</p><ul><li><p><code>\(?0\d&#123;2&#125;[) -]?\d&#123;8&#125;</code>: 匹配几种格式的电话号码  ，像*(010)88886666<em>，或</em>022-22334455<em>，或</em>02912345678*等。 </p><p>首先是一个转义字符(,它能出现0次或1次(?),然后是一个0，后面跟着2个数字(\d{2})，然后是)或-或空格中的一个，它出现1次或不出现(?)，最后是8个数字(\d{8})。 </p><p> 也能匹配<em>010)12345678</em>或*(022-87654321*这样的“不正确”的格式</p></li></ul><h4 id="分枝条件"><a href="#分枝条件" class="headerlink" title="分枝条件"></a>分枝条件</h4><p>不幸的是，刚才那个表达式也能匹配<em>010)12345678</em>或*(022-87654321*这样的“不正确”的格式。要解决这个问题，我们需要用到分枝条件。正则表达式里的分枝条件指的是有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用|把不同的规则分隔开。</p><ul><li><code>0\d&#123;2&#125;-\d&#123;8&#125;|0\d&#123;3&#125;-\d&#123;7&#125;</code>: 匹配两种以连字号分隔的电话号码：一种是三位区号，8位本地号(如010-12345678)，一种是4位区号，7位本地号(0376-2233445) </li><li><code>\(0\d&#123;2&#125;\)[- ]?\d&#123;8&#125;|0\d&#123;2&#125;[- ]?\d&#123;8&#125;</code>: 匹配3位区号的电话号码，其中区号可以用小括号括起来，也可以不用，区号与本地号间可以用连字号或空格间隔，也可以没有间隔</li></ul><p> 使用分枝条件时，要注意各个条件的顺序，匹配分枝条件时，将会从左到右地测试每个条件，如果满足了某个分枝的话，就不会去再管其它的条件了 </p><ul><li><code>\d&#123;5&#125;-\d&#123;4&#125;|\d&#123;5&#125;</code>: 规则是5位数字，或者用连字号间隔的9位数字 </li><li><code>\d&#123;5&#125;|\d&#123;5&#125;-\d&#123;4&#125;</code>: 只会匹配5位的数字(以及9位数字的前5位)</li></ul><h4 id="分组"><a href="#分组" class="headerlink" title="分组"></a>分组</h4><p>  重复多个字符，用小括号来指定子表达式</p><ul><li><code>(\d&#123;1,3&#125;\.)&#123;3&#125;\d&#123;1,3&#125;</code>: <code>\d&#123;1,3&#125;</code>匹配1到3位的数字，<code>(\d&#123;1,3&#125;\.)&#123;3&#125;</code>匹配三位数字加上一个英文句号(这个整体也就是这个<strong>分组</strong>)重复3次，最后再加上一个一到三位的数字<code>(\d&#123;1,3&#125;)</code></li><li><code>((2[0-4]\d|25[0-5]|[01]?\d\d?)\.)&#123;3&#125;(2[0-4]\d|25[0-5]|[01]?\d\d?)</code>: IP地址， 每个数字都不能大于255， 01.02.03.04 这样前面带有0的数字也是正确的</li></ul><h4 id="反义"><a href="#反义" class="headerlink" title="反义"></a>反义</h4><p>取反的意思， 想查找除了数字以外，其它任意字符都行的情况 </p><table><thead><tr><th>常用的反义代码</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr></tbody></table><ul><li><code>[^aeiou]</code>:匹配除了aeiou这几个字母以外的任意字符</li><li><code>\S+</code>: 不包含空白符的字符串 </li><li><code>&lt;a[^&gt;]+&gt;</code>: 用尖括号括起来的以a开头的字符串</li></ul><h4 id="零宽断言"><a href="#零宽断言" class="headerlink" title="零宽断言"></a>零宽断言</h4><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>(?&#x3D;exp)</td><td>匹配exp前面的位置，断言自身出现的位置的后面能匹配表达式exp</td></tr><tr><td>(?&lt;&#x3D;exp)</td><td>匹配exp后面的位置，断言自身出现的位置的前面能匹配表达式exp</td></tr><tr><td>(?!exp)</td><td>匹配后面跟的不是exp的位置</td></tr><tr><td>(?&lt;!exp)</td><td>匹配前面不是exp的位置</td></tr></tbody></table><ul><li><code>\b\w+(?=ing\b)</code>: 匹配以ing结尾的单词的前面部分(除了ing以外的部分)，如查找*I’m singing while you’re dancing.*时，它会匹配sing和danc </li><li><code>(?&lt;=\bre)\w+\b</code>: 匹配以re开头的单词的后半部分(除了re以外的部分)，例如在查找<em>reading a book</em>时，它匹配ading </li><li><code>(?&lt;=\s)\d+(?=\s)</code>: 匹配以空白符间隔的数字(再次强调，不包括这些空白符)</li></ul><h4 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title="贪婪与懒惰"></a>贪婪与懒惰</h4><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配<strong>尽可能多</strong>的字符。以这个表达式为例：a.<em>b，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索</em>aabab*的话，它会匹配整个字符串aabab。这被称为<strong>贪婪</strong>匹配。</p><p>有时，我们更需要<strong>懒惰</strong>匹配，也就是匹配<strong>尽可能少</strong>的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号?。这样.*?就意味着匹配任意数量的重复，但是在能使整个匹配成功的前提下使用最少的重复</p><table><thead><tr><th>懒惰限定符</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><h4 id="更多"><a href="#更多" class="headerlink" title="更多"></a>更多</h4><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>\a</td><td>报警字符(打印它的效果是电脑嘀一声)</td></tr><tr><td>\b</td><td>通常是单词分界位置，但如果在字符类里使用代表退格</td></tr><tr><td>\t</td><td>制表符，Tab</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\v</td><td>竖向制表符</td></tr><tr><td>\f</td><td>换页符</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\e</td><td>Escape</td></tr><tr><td>\0nn</td><td>ASCII代码中八进制代码为nn的字符</td></tr><tr><td>\xnn</td><td>ASCII代码中十六进制代码为nn的字符</td></tr><tr><td>\unnnn</td><td>Unicode代码中十六进制代码为nnnn的字符</td></tr><tr><td>\cN</td><td>ASCII控制字符。比如\cC代表Ctrl+C</td></tr><tr><td>\A</td><td>字符串开头(类似^，但不受处理多行选项的影响)</td></tr><tr><td>\Z</td><td>字符串结尾或行尾(不受处理多行选项的影响)</td></tr><tr><td>\z</td><td>字符串结尾(类似$，但不受处理多行选项的影响)</td></tr><tr><td>\G</td><td>当前搜索的开头</td></tr><tr><td>\p{name}</td><td>Unicode中命名为name的字符类，例如\p{IsGreek}</td></tr><tr><td>(?&gt;exp)</td><td>贪婪子表达式</td></tr><tr><td>(?<x>-<y>exp)</td><td>平衡组</td></tr><tr><td>(?im-nsx:exp)</td><td>在子表达式exp中改变处理选项</td></tr><tr><td>(?im-nsx)</td><td>为表达式后面的部分改变处理选项</td></tr><tr><td>(?(exp)yes|no)</td><td>把exp当作零宽正向先行断言，如果在这个位置能匹配，使用yes作为此组的表达式；否则使用no</td></tr><tr><td>(?(exp)yes)</td><td>同上，只是使用空表达式作为no</td></tr><tr><td>(?(name)yes|no)</td><td>如果命名为name的组捕获到了内容，使用yes作为表达式；否则使用no</td></tr><tr><td>(?(name)yes)</td><td>同上，只是使用空表达式作为no</td></tr></tbody></table><hr><p> <a href="https://deerchao.cn/tutorials/regex/regex.htm#top">正则表达式30分钟入门教程 (deerchao.cn)</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;元字符&quot;&gt;&lt;a href=&quot;#元字符&quot; class=&quot;headerlink&quot; title=&quot;元字符&quot;&gt;&lt;/a&gt;元字符&lt;/h4&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;常用的元字符&lt;/th&gt;
&lt;th&gt;说明&lt;/th&gt;
&lt;/tr&gt;
&lt;</summary>
      
    
    
    
    <category term="编程杂事" scheme="http://example.com/categories/%E7%BC%96%E7%A8%8B%E6%9D%82%E4%BA%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Shader-基础</title>
    <link href="http://example.com/2022/02/19/Shader-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/02/19/Shader-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-02-19T06:41:38.480Z</published>
    <updated>2022-02-19T06:57:27.144Z</updated>
    
    <content type="html"><![CDATA[<p>简介</p><p>分类</p><ul><li>固定管线着色器（没有嵌套CG语言 代码中没有CGPROGARAM的）</li><li>顶点shader（顶点片段着色器 代码段中有surf函数）<br>干预顶点位置 改变模型形态</li><li>像素shader（表面着色器 代码段中有#pargma vertex name 和#pragma fragment frag）<br>干预顶点上色 哪个点贴哪个纹理</li></ul><p>语法</p><pre><code>Shader “name” &#123; // name shader名字// 定义的一些属性，定义在这里的会在属性查看器里面显示; [Propeties] // 子着色器列表，一个Shader必须至少有一个子着色器; Subshaders: &#123;....&#125;// 如果子着色器显卡不支持，就会降级,即Fallback操作;[Fallback]</code></pre><hr><p>属性</p><pre><code>_Range (“range value”, Range(0, 1)) = 0.3; // 定义一个范围_Color(“color”, Color) = (1, 1, 1, 1); // 定义一个颜色_FloatValue(“float value”, Float) = 1 // 定义一个浮点_MainTex (“Albedo”, Cube) = “skybox” &#123;TexGen CubeReflect&#125; // 定义一个立方贴图纹理属性;</code></pre><ol><li>类型 多种多样<ul><li>Float,Int,Vector(4维向量),Range(start,end)</li><li>Color(n,n,n,n)(0-1)</li><li>2D,3D,Cube,Rect：纹理属性</li></ul></li><li>options：纹理属性选项<ul><li>TexGen：纹理生成模式（纹理自动生成纹理坐标）类型多样，有ObjectLinear,EyeLinear,SphereMap,CubeReflect,CubeNormal</li><li>LightmapMod：光照贴图模式（纹理会被渲染器的光线贴图影响）</li></ul></li></ol><hr><p>子着色器</p><p>着色器使用Tags来告诉他们如何和何时会被渲染到渲染引擎，包含多个Pass，依次执行</p><pre><code>    SubShader &#123; [Tags] [CommonState] Passdef [Passdef ...] &#125;    SubShader    &#123;        Pass         &#123;            Lighting Off        // 关闭灯光            SetTexture [_MainTex] &#123; &#125;        &#125;    &#125;</code></pre><ul><li>SubShader Tags<br>    Tags { “TagName1” &#x3D; “Value1” “TagName2” &#x3D; “Value2” }</li></ul><p>指定 TagName1 的值为 Value1, TagName2 的值为 Value2。你可以有尽可能多的标签。</p><p>标签基本上是键值对。在SubShader标签是用来确定SubShader呈现顺序和其他参数。注意，下面的标签必须是SubShader部分，而不是在Pass内部！</p><p>Unity除了内置标签,你可以使用你自己的标签和使用Material.GetTag函数查询它们。</p><hr><p>Pass</p><pre><code>    Pass &#123; [Name and Tags] [RenderSetup] &#125;</code></pre><ul><li>Name and Tags：Pass 可以定义它的名称和任意数量的标签-传递给渲染引擎的传递意图的名称 &#x2F; 值的字符串。</li><li>RenderSetup：设置图形硬件的各种状态，例如α混合应打开，深度测试应使用，等等。<ul><li>Cull：设置多边形剔除模式<br>    Cull Back | Front | Off</li><li>ZTest：设置深度缓冲测试模式<br>    ZTest (Less | Greater | LEqual | GEqual | Equal | NotEqual | Always)</li><li>ZWrite：设置深度缓冲的写模式<br>    ZWrite On | Off</li><li>Blend：设置α混合模式<br>    Blend SourceBlendMode DestBlendMode<br>    Blend SourceBlendMode DestBlendMode, AlphaSourceBlendMode AlphaDestBlendMode</li><li>ColorMask：设置彩色通道写掩码。设置为0将关闭所有渲染的颜色通道。默认模式是写所有通道（RGBA），但是对于一些特殊的效果，你可能想离开一定的渠道不被修改，或完全禁用颜色写<br>    ColorMask RGB | A | 0 | any combination of R, G, B, A</li><li>Offset：设置Z缓冲深度偏移量<br>    Offset OffsetFactor, OffsetUnits</li></ul></li><li>固定功能着色器命令<br>        Lighting On | Off<br>        Material { Material Block }<br>        SeparateSpecular On | Off<br>        Color Color-value<br>        ColorMaterial AmbientAndDiffuse | Emission<br>        &#x2F;&#x2F;所有这些控制固定功能，每个顶点照明：打开它，设置材料的颜色，打开高光的亮点，提供默认的颜色，如果顶点光照关闭，并控制网格顶点颜色如何影响照明<ul><li>Fog：<br>    Fog { Fog Block }</li><li>AlphaTest：<br>    AlphaTest ( Less | Greater | LEqual | GEqual | Equal | NotEqual | Always ) CutoffValue</li><li>Texture Combiners：<br>    SetTexture textureProperty { combine options }</li></ul></li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;简介&lt;/p&gt;
&lt;p&gt;分类&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;固定管线着色器（没有嵌套CG语言 代码中没有CGPROGARAM的）&lt;/li&gt;
&lt;li&gt;顶点shader（顶点片段着色器 代码段中有surf函数）&lt;br&gt;干预顶点位置 改变模型形态&lt;/li&gt;
&lt;li&gt;像素shader（表面</summary>
      
    
    
    
    <category term="Shader" scheme="http://example.com/categories/Shader/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-os</title>
    <link href="http://example.com/2022/02/19/Lua-os/"/>
    <id>http://example.com/2022/02/19/Lua-os/</id>
    <published>2022-02-19T06:41:38.479Z</published>
    <updated>2022-02-19T06:57:55.436Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>os.clock(time) 返回执行该程序CPU花去的时钟秒数</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">start=<span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="keyword">while</span> <span class="literal">true</span> <span class="keyword">do</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">os</span>.<span class="built_in">clock</span>()-start&gt;<span class="number">3</span> <span class="keyword">then</span></span><br><span class="line">start=<span class="built_in">os</span>.<span class="built_in">clock</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;111&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>os.date(time) 返回时间字符串 格式化形式多</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 本地时间</span></span><br><span class="line"><span class="keyword">local</span> timetable = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;*t&quot;</span>, <span class="built_in">os</span>.<span class="built_in">time</span>());   </span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(timetable) <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">print</span>(i, v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- ！格林尼治时间</span></span><br><span class="line"><span class="keyword">local</span> utimetable = <span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!*t&quot;</span>, <span class="built_in">os</span>.<span class="built_in">time</span>()); </span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">pairs</span>(utimetable) <span class="keyword">do</span></span><br><span class="line">      <span class="built_in">print</span>(i, v);</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>os.time([table]) 返回当前系统的时间</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- print:1540433633001/01/70 08:00:0001/01/70 00:00:00</span></span><br><span class="line"><span class="comment">-- 北京时间的1970-1-1 08:00:00是0时区时间的1970-1-1 00:00:00</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">time</span>())</span><br><span class="line"></span><br><span class="line">t=&#123;year=<span class="number">1970</span>,month=<span class="number">1</span>,day=<span class="number">1</span>,hour=<span class="number">8</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">time</span>(t))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;%c&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t)))</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">date</span>(<span class="string">&quot;!%c&quot;</span>,<span class="built_in">os</span>.<span class="built_in">time</span>(t)))</span><br></pre></td></tr></table></figure></li><li><p>os.difftime(t1,t2) 时间差值 返回秒数</p></li><li><p>os.execute([command]) 调用系统的很多函数 可以复制文件 暂停 等等</p></li><li><p>os.exit() 退出程序</p></li><li><p>os.getenv(name) 查询系统环境变量 程序路径 系统盘符</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;SystemRoot&quot;</span>))          <span class="comment">-- 系统根目录</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;WoXiaXieDe&quot;</span>))          <span class="comment">-- 我乱写的</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;ALLUSERSPROFILE&quot;</span>))     <span class="comment">-- 所有“用户配置文件”的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;alluserSpRoFilE&quot;</span>))     <span class="comment">-- 所有“用户配置文件”的位置</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;COMPUTERNAME&quot;</span>))        <span class="comment">-- 计算机的名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;COMSPEC&quot;</span>))             <span class="comment">-- 命令行解释器可执行程序的准确路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;HOMEDRIVE&quot;</span>))           <span class="comment">-- 连接到用户主目录的本地工作站驱动器号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;HOMEPATH&quot;</span>))            <span class="comment">-- 用户主目录的完整路径</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;NUMBER_OF_PROCESSORS&quot;</span>))<span class="comment">-- 安装在计算机上的处理器的数目</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;OS&quot;</span>))                  <span class="comment">-- 操作系统的名称</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;PROCESSOR_LEVEL&quot;</span>))     <span class="comment">-- 计算机上安装的处理器的型号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;PATHEXT&quot;</span>))             <span class="comment">-- 连接到用户主目录的本地工作站驱动器号</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;PROCESSOR_REVISION&quot;</span>))  <span class="comment">-- 处理器修订号的系统变量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;TEMP&quot;</span>))                <span class="comment">-- 临时目录</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">os</span>.<span class="built_in">getenv</span>(<span class="string">&quot;SYSTEMDRIVE&quot;</span>))         <span class="comment">-- 系统根目录的驱动器</span></span><br></pre></td></tr></table></figure></li><li><p>os.remove(file) 删除文件</p></li><li><p>os.rename(oldname,newname) 重命名</p></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/nb/4814025">https://www.jianshu.com/nb/4814025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;ul&gt;
&lt;</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-元表</title>
    <link href="http://example.com/2022/02/19/Lua-%E5%85%83%E8%A1%A8/"/>
    <id>http://example.com/2022/02/19/Lua-%E5%85%83%E8%A1%A8/</id>
    <published>2022-02-19T06:41:38.479Z</published>
    <updated>2022-02-19T07:02:05.468Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>模块库类似一个封装库，存放公用代码，以api接口形式被其他调用</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- module.lua模块</span></span><br><span class="line"><span class="comment">-- 定义模块</span></span><br><span class="line"><span class="built_in">module</span>=&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 定义常量</span></span><br><span class="line"><span class="built_in">module</span>.a=<span class="number">1</span></span><br><span class="line"><span class="comment">-- 定义公有函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">module.fun1</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;public&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 定义私有函数</span></span><br><span class="line"><span class="keyword">local</span> <span class="function"><span class="keyword">function</span> <span class="title">module.fun2</span><span class="params">()</span></span></span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;private&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- return</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">module</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- test.lua调用</span></span><br><span class="line"><span class="built_in">require</span>(<span class="string">&quot;module&quot;</span>)</span><br><span class="line"><span class="built_in">module</span>.fun1()</span><br></pre></td></tr></table></figure><h3 id="元表"><a href="#元表" class="headerlink" title="元表"></a>元表</h3><h4 id="元表（metatable）提供两个table之间的操作"><a href="#元表（metatable）提供两个table之间的操作" class="headerlink" title="元表（metatable）提供两个table之间的操作"></a>元表（metatable）提供两个table之间的操作</h4><ul><li><p>set：将table设置为元表 （若元表存在_metatable键值 则设置失败）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mytable=&#123;&#125;<span class="comment">--普通表</span></span><br><span class="line">metatable=&#123;&#125;<span class="comment">--元表</span></span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,metatable)<span class="comment">--设置为元表</span></span><br></pre></td></tr></table></figure></li><li><p>get：获取对象的元表</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">getmetatable</span>(mytable)</span><br></pre></td></tr></table></figure></li></ul><h4 id="元方法"><a href="#元方法" class="headerlink" title="元方法"></a>元方法</h4><ul><li><p><code>__index</code>：访问表，表中没有对应值时，去元表的<code>__index</code>中找（<code>__table</code>可以是表包含很多）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">t1=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line">t2=&#123;&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(t1,t2);</span><br><span class="line"><span class="built_in">print</span>(t1.c);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 包含表</span></span><br><span class="line">t3=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line">t4=&#123;<span class="built_in">__index</span>=&#123;c=<span class="number">3</span>&#125;&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(t3,t4);</span><br><span class="line"><span class="built_in">print</span>(t3.c);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 包含函数(function注意包含t6参数)</span></span><br><span class="line">t5=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line">t6=&#123;<span class="built_in">__index</span>=</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(t6,key)</span></span></span><br><span class="line"><span class="keyword">if</span>(key==<span class="string">&quot;c&quot;</span>) <span class="keyword">then</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">3</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(t5,t6);</span><br><span class="line"><span class="built_in">print</span>(t5.c);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者写法</span></span><br><span class="line">t7=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(t7,&#123;<span class="built_in">__index</span>=&#123;c=<span class="number">3</span>&#125;&#125;);</span><br><span class="line"><span class="built_in">print</span>(t7.c);</span><br></pre></td></tr></table></figure></li><li><p><code>__newindex</code>：更新表，赋值对应键值，若没有，就会去元表的<code>__newindex</code>中找</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">m=&#123;d=<span class="number">4</span>&#125;;</span><br><span class="line">meta=&#123;<span class="built_in">__newindex</span>=m&#125;;</span><br><span class="line">mytable=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,meta);</span><br><span class="line">mytable.c=<span class="number">3</span>;<span class="comment">-- 将c键值加到m中</span></span><br><span class="line"><span class="built_in">print</span>(mytable.c,m.c,mytable.d,m.d);<span class="comment">-- nil 3 nil 4</span></span><br><span class="line"></span><br><span class="line">m=&#123;d=<span class="number">4</span>&#125;;</span><br><span class="line">meta=&#123;<span class="built_in">__newindex</span>=m,<span class="built_in">__index</span>=m&#125;;</span><br><span class="line">mytable=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,meta);</span><br><span class="line">mytable.c=<span class="number">3</span>;<span class="comment">-- 将c键值加到m中 此刻m含有c键值</span></span><br><span class="line"><span class="built_in">print</span>(mytable.c,m.c,mytable.d,m.d);<span class="comment">-- 3 3 4 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 或者写法</span></span><br><span class="line">m=&#123;d=<span class="number">4</span>&#125;;</span><br><span class="line">mytable=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,&#123;<span class="built_in">__newindex</span>=m,<span class="built_in">__index</span>=m&#125;);</span><br><span class="line"></span><br><span class="line">mytable.c=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">print</span>(mytable.c,m.c,mytable.d,m.d);</span><br></pre></td></tr></table></figure></li><li><p>rawget rawset：rawget可以直接获取索引实际值，不通过<code>__index</code>元方法 rawset可以直接对表中索引赋值，不通过<code>__newindex</code>元方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- rawget调用方式不同</span></span><br><span class="line">t7=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(t7,&#123;<span class="built_in">__index</span>=&#123;c=<span class="number">3</span>&#125;&#125;);</span><br><span class="line"><span class="comment">--print((t7.c));</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">rawget</span>(t7,c));</span><br><span class="line"></span><br><span class="line"><span class="comment">-- rawset赋值方式不同</span></span><br><span class="line">m=&#123;&#125;;</span><br><span class="line">mytable=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>&#125;;</span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,&#123;<span class="built_in">__newindex</span>=m&#125;);</span><br><span class="line"><span class="comment">--mytable.c=3;</span></span><br><span class="line"><span class="built_in">rawset</span>(mytable,<span class="string">&quot;c&quot;</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">print</span>(mytable.c,m.c);</span><br></pre></td></tr></table></figure></li><li><p>操作符：就是对应符号对应的”__名字“，主要还是对应操作符后面写的方法</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">mytable=&#123;a=<span class="number">1</span>,b=<span class="number">2</span>,c=<span class="number">3</span>&#125;;</span><br><span class="line">meta=&#123;<span class="built_in">__add</span>=</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(first,second)</span></span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(second) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">insert</span>(first,v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> first;<span class="comment">-- 元表就是一个操作</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line">mytable = <span class="built_in">setmetatable</span>(mytable,meta)</span><br><span class="line"></span><br><span class="line">secondtable=&#123;d=<span class="number">4</span>,e=<span class="number">5</span>,f=<span class="number">6</span>&#125;;</span><br><span class="line">mytable=mytable+secondtable;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--[[ 对应其他的操作</span></span><br><span class="line"><span class="comment">+=&gt;__add</span></span><br><span class="line"><span class="comment">-(减号)  =&gt;  __sub</span></span><br><span class="line"><span class="comment">*=&gt;__mul</span></span><br><span class="line"><span class="comment">/=&gt;__div</span></span><br><span class="line"><span class="comment">%=&gt;__mod</span></span><br><span class="line"><span class="comment">-(负号)  =&gt;  __unm</span></span><br><span class="line"><span class="comment">..=&gt;__concat</span></span><br><span class="line"><span class="comment">===&gt;__eq</span></span><br><span class="line"><span class="comment">&lt;=&gt;__lt</span></span><br><span class="line"><span class="comment">&lt;==&gt;__le</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure></li><li><p>__call：在Lua调用一个值时调用，就是调用每个值可能要进行统一操作</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mytable=&#123;<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>&#125;;</span><br><span class="line">meta=&#123;<span class="built_in">__call</span>=</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(first,a)</span></span></span><br><span class="line"><span class="keyword">return</span>(<span class="string">&quot;id=&quot;</span>..a..<span class="string">&quot; is &quot;</span>..first[a]);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line">mytable=<span class="built_in">setmetatable</span>(mytable,meta)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mytable(<span class="number">2</span>));</span><br></pre></td></tr></table></figure></li><li><p>__tostring：修改表的输出行为</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">mytable=&#123;<span class="string">&quot;111&quot;</span>,<span class="string">&quot;222&quot;</span>&#125;;</span><br><span class="line">meta=&#123;<span class="built_in">__tostring</span>=</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(first)</span></span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(first) <span class="keyword">do</span></span><br><span class="line"><span class="keyword">return</span>(<span class="string">&quot;id=&quot;</span>..k..<span class="string">&quot; is &quot;</span>..v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">setmetatable</span>(mytable,meta)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(mytable);</span><br></pre></td></tr></table></figure></li></ul><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul><li>meta元表代表的是一种操作，放在其他地方也这样写，与具体的表无关</li><li>meta元表可以做很多操作，命名不同，具体做什么在function里面实现</li><li>meta元表可以做很多初始化或者类似构造函数的功能，面向对象编程</li><li>pairs：是迭代器的元方法，__pairs</li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/nb/4814025">https://www.jianshu.com/nb/4814025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;模块库类似一个封装库，存放公用代码，以api接口形式被其他调用&lt;/p&gt;
&lt;figure class=&quot;highlight lua&quot;&gt;&lt;tab</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-io</title>
    <link href="http://example.com/2022/02/19/Lua-io/"/>
    <id>http://example.com/2022/02/19/Lua-io/</id>
    <published>2022-02-19T06:41:38.478Z</published>
    <updated>2022-02-19T06:58:07.470Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>没有特殊情况，所有IO函数在失败的情况下返回nil（第二个参数一般是错误信息</p><p>）</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>io.open(filename[,mode])</p><p>出错返回nil及错误信息 正确返回文件编号 mode为打开方式</p><ul><li>“r”：只读，文件必须存在，默认打开方式</li><li>“r+”：只读，文件必须存在，读取从头开始，写入从头开始，保留原内容</li><li>“w”：只写，文件存在清空，不存在创建，写入从头开始</li><li>“w+”：只写，文件存在清空，不存在创建，读取从头开始，写入从头开始</li><li>“a”：附加方式打开只写文件，文件不存在创建，写入从尾开始，保留原内容</li><li>“a+”：附加方式打开可读写文件，文件不存在创建，写入从尾开始，保留原内容</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意：mode有引号 以下纯打开不进行任何操作文件亿被清空</span></span><br><span class="line">a,b=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test1.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a,b)</span><br></pre></td></tr></table></figure></li><li><p>io.close([file])</p><p>关闭文件，成功true，参数并不是文件名</p><p>其他写法：file:close() </p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- print:true</span></span><br><span class="line">a,b=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;test1.txt&quot;</span>,<span class="string">&quot;w+&quot;</span>)</span><br><span class="line"><span class="comment">--c=io.close(&quot;test1.txt&quot;)--文件名报错</span></span><br><span class="line">c=<span class="built_in">io</span>.<span class="built_in">close</span>(a)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure></li><li><p>io.input([file]) </p><p>参数可以为文件名或者文件，将其设为默认的输入文件，不填参数默认的是命令行界面</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 文件名参数 文件内容作为默认输入文件</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line">a=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 文件参数 </span></span><br><span class="line">f=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(f)</span><br><span class="line">a=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 命令行 默认的io.input()输入文件</span></span><br><span class="line">a=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br></pre></td></tr></table></figure></li><li><p>io.output() </p><p>参数文件名，将其设为默认的输出文件，不填参数默认的是命令行界面（io.stdout）</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意：最好先确定输入文件以及输出文件 再进行读取操作</span></span><br><span class="line"><span class="comment">-- 命令行界面io.stdout</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(<span class="built_in">io</span>.<span class="built_in">stdout</span>)</span><br><span class="line">a=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line">b=<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;name:&quot;</span>..a)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 文件名</span></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line">a=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line">b=<span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;name:&quot;</span>..a)</span><br></pre></td></tr></table></figure></li><li><p>io.read(…) </p><p>根据格式读取内容 读不到返回nil 默认以<code>*l</code>的形式读取</p><p>其他写法：file:read() 这样可以不用设置默认输入文件</p><p>读取完一次之后 当前位置会到读取末尾 下次读取继续继续 若是关闭文件重新读取 则从头开始</p><ul><li>“n”：读取一个数字 唯一返回数字而不是字符串的读取格式</li><li>“a”：从当前位置读取余下的所有内容，如果在文件尾，则返回空串</li><li>“l”：读取下一行内容，在文尾则返回nil</li><li>number：读取number个字符的字符串，number&#x3D;0则返回空串，在文尾则返回nil</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 111.txt</span></span><br><span class="line"><span class="number">1</span>start</span><br><span class="line"><span class="number">2</span>line2</span><br><span class="line"><span class="number">3</span>line3</span><br><span class="line"><span class="number">4</span>line4</span><br><span class="line"><span class="number">5</span>line5</span><br><span class="line"><span class="number">6</span><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 读取完当前位置改变 文件关闭重新读取当前位置从头开始</span></span><br><span class="line"><span class="comment">-- print:1start2line21start</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">input</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line">a=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"></span><br><span class="line">b=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(b)</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">close</span>(file)</span><br><span class="line"></span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">input</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line">c=<span class="built_in">io</span>.<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- b的10个字符包括一个换行符 c=nil </span></span><br><span class="line"><span class="comment">--[[ print:</span></span><br><span class="line"><span class="comment">a:1start</span></span><br><span class="line"><span class="comment">b:2line2</span></span><br><span class="line"><span class="comment">3li</span></span><br><span class="line"><span class="comment">nil</span></span><br><span class="line"><span class="comment">d:ne3</span></span><br><span class="line"><span class="comment">4line4</span></span><br><span class="line"><span class="comment">5line5</span></span><br><span class="line"><span class="comment">6end</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>,<span class="string">&quot;r&quot;</span>)</span><br><span class="line">a=file:<span class="built_in">read</span>(<span class="string">&quot;*l&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;a:&quot;</span>..a)</span><br><span class="line"></span><br><span class="line">b=file:<span class="built_in">read</span>(<span class="number">10</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;b:&quot;</span>..b)</span><br><span class="line"></span><br><span class="line">c=file:<span class="built_in">read</span>(<span class="string">&quot;*n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(c)</span><br><span class="line"></span><br><span class="line">d=file:<span class="built_in">read</span>(<span class="string">&quot;*a&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;d:&quot;</span>..d)</span><br></pre></td></tr></table></figure></li><li><p>io.write(…)</p><p>可以有多个参数，每个参数必须是字符串或者数字，其他类型使用tostring或string.format()写入 </p><p>其他写法：file:write() 这样可以不用设置默认输出文件</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ print:</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">output</span>(file)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;hello\n&quot;</span>)</span><br><span class="line"><span class="built_in">io</span>.<span class="built_in">write</span>(<span class="string">&quot;hello\n&quot;</span>)</span><br><span class="line"></span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;world\n&quot;</span>)</span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;world\n&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>file:seek(whence,offset)</p><p>控制读写指针，设置获取文件位置，返回值为最终文件位置，offset表示偏移默认0，whence表示不同模式</p><ul><li>“set”：文件头开始</li><li>“cur”：从当前开始（默认）</li><li>“end”：文件尾开始</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- offset可以为负数 file:seek(&quot;end&quot;)返回值正好是文件大小</span></span><br><span class="line"><span class="comment">--[[</span></span><br><span class="line"><span class="comment">n:0a:1start</span></span><br><span class="line"><span class="comment">n:3a:art</span></span><br><span class="line"><span class="comment">2l</span></span><br><span class="line"><span class="comment">n:13a:2</span></span><br><span class="line"><span class="comment">3lin</span></span><br><span class="line"><span class="comment">n:41a:end</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">n=file:seek(<span class="string">&quot;set&quot;</span>);</span><br><span class="line">a=file:<span class="built_in">read</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n:&quot;</span>..n..<span class="string">&quot;a:&quot;</span>..a)</span><br><span class="line"></span><br><span class="line">n=file:seek(<span class="string">&quot;set&quot;</span>,<span class="number">3</span>);</span><br><span class="line">a=file:<span class="built_in">read</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n:&quot;</span>..n..<span class="string">&quot;a:&quot;</span>..a)</span><br><span class="line"></span><br><span class="line">n=file:seek(<span class="string">&quot;cur&quot;</span>,<span class="number">3</span>);</span><br><span class="line">a=file:<span class="built_in">read</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n:&quot;</span>..n..<span class="string">&quot;a:&quot;</span>..a)</span><br><span class="line"></span><br><span class="line">n=file:seek(<span class="string">&quot;end&quot;</span>,<span class="number">-3</span>);</span><br><span class="line">a=file:<span class="built_in">read</span>(<span class="number">6</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;n:&quot;</span>..n..<span class="string">&quot;a:&quot;</span>..a)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 关于a+方式，只从内容尾开始写入，seek当前位置是正确的，但执行写入时直接继续在尾部写，并不在当前位置写入</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>,<span class="string">&quot;a+&quot;</span>)</span><br><span class="line">a=file:<span class="built_in">write</span>(<span class="string">&quot;!-!&quot;</span>)</span><br><span class="line">n=file:seek(<span class="string">&quot;cur&quot;</span>,<span class="number">-10</span>)</span><br><span class="line">b=file:<span class="built_in">write</span>(<span class="string">&quot;!-!&quot;</span>)</span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- print:!!---!</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>,<span class="string">&quot;w&quot;</span>)</span><br><span class="line">file:seek()</span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;!-!&quot;</span>)</span><br><span class="line">file:seek(<span class="string">&quot;cur&quot;</span>,<span class="number">-2</span>)</span><br><span class="line">file:<span class="built_in">write</span>(<span class="string">&quot;!---!&quot;</span>)</span><br></pre></td></tr></table></figure></li><li><p>io.type()</p><p>判断文件描述符的状态 是一个打开的文件返回字符串“file”，是个关闭的文件返回字符串“closed file”，是无效文件描述符返回nil</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- print:fileclosed filenil</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">type</span>(file))</span><br><span class="line"></span><br><span class="line">file:<span class="built_in">close</span>()</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">type</span>(file))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">type</span>(<span class="string">&quot;Test&quot;</span>))</span><br></pre></td></tr></table></figure></li><li><p>io.lines([filename])</p><p>只读方式打开文件 返回一个迭代函数，每次调用都返回文件中新的一行，当读取到结尾时，返回nil并自动关闭文件</p><p>因为是只读方式，所以最好先检测一下是否存在</p><p>其他写法：file:lines() 这种写法结束时不会自动关闭</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">--[[ print:</span></span><br><span class="line"><span class="comment">1start</span></span><br><span class="line"><span class="comment">2line2</span></span><br><span class="line"><span class="comment">3line3</span></span><br><span class="line"><span class="comment">4line4</span></span><br><span class="line"><span class="comment">5line5</span></span><br><span class="line"><span class="comment">6end</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">func=<span class="built_in">io</span>.<span class="built_in">lines</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"><span class="built_in">print</span>(func())</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> func <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 注意：输出最后io.type=file 说明文件在最后没有关闭，这个是io.lines(filename)和file:name的区别</span></span><br><span class="line"><span class="comment">--[[ print:</span></span><br><span class="line"><span class="comment">1start</span></span><br><span class="line"><span class="comment">2line2</span></span><br><span class="line"><span class="comment">3line3</span></span><br><span class="line"><span class="comment">4line4</span></span><br><span class="line"><span class="comment">5line5</span></span><br><span class="line"><span class="comment">6end</span></span><br><span class="line"><span class="comment">file</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line">file=<span class="built_in">io</span>.<span class="built_in">open</span>(<span class="string">&quot;111.txt&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> line <span class="keyword">in</span> file:<span class="built_in">lines</span>() <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(line)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">io</span>.<span class="built_in">type</span>(file))</span><br><span class="line">file:<span class="built_in">close</span>()</span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/nb/4814025">https://www.jianshu.com/nb/4814025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;没有特殊情况，所有IO函数在失败的情况下返回nil（第二个参数一般是错误信息&lt;/p&gt;
&lt;p&gt;）&lt;/p&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a hre</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-table</title>
    <link href="http://example.com/2022/02/19/Lua-table/"/>
    <id>http://example.com/2022/02/19/Lua-table/</id>
    <published>2022-02-19T06:41:38.478Z</published>
    <updated>2022-02-19T06:57:47.382Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>table库中函数针对的几乎都是数组类型的</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><ul><li><p>table.getn()</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- #表长</span></span><br><span class="line"><span class="comment">-- table.getn() #table 索引1开始 正序连续 </span></span><br><span class="line"><span class="comment">-- 1.不连续    print:3 3</span></span><br><span class="line">mytable=&#123;[<span class="number">1</span>]=<span class="string">&quot;a&quot;</span>,[<span class="number">2</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">3</span>]=<span class="string">&quot;c&quot;</span>,[<span class="number">5</span>]=<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line">mytable=&#123;[<span class="number">1</span>]=<span class="string">&quot;a&quot;</span>,[<span class="number">2</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">3</span>]=<span class="string">&quot;c&quot;</span>,[<span class="number">4</span>]=<span class="literal">nil</span>,[<span class="number">5</span>]=<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- 2.第一个索引不是1 print:2 0</span></span><br><span class="line">mytable=&#123;[<span class="number">-1</span>]=<span class="string">&quot;a&quot;</span>,[<span class="number">0</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">1</span>]=<span class="string">&quot;c&quot;</span>,[<span class="number">2</span>]=<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line">mytable=&#123;[<span class="number">-1</span>]=<span class="string">&quot;a&quot;</span>,[<span class="number">0</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">2</span>]=<span class="string">&quot;c&quot;</span>,[<span class="number">3</span>]=<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- 3.倒序print:1</span></span><br><span class="line">mytable=&#123;[<span class="number">1</span>]=<span class="string">&quot;a&quot;</span>,[<span class="number">0</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">-1</span>]=<span class="string">&quot;c&quot;</span>,[<span class="number">-2</span>]=<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">table_leng</span><span class="params">(t)</span></span></span><br><span class="line">  <span class="keyword">local</span> leng=<span class="number">0</span></span><br><span class="line">  <span class="keyword">for</span> k, v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line">    leng=leng+<span class="number">1</span></span><br><span class="line">  <span class="keyword">end</span></span><br><span class="line">  <span class="keyword">return</span> leng;</span><br><span class="line"><span class="keyword">end</span></span><br></pre></td></tr></table></figure></li><li><p>table.maxn()</p><p>获取数组最大下标（数组不连续时很好用）</p><p>若都是负数索引或者非数字索引，返回0</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- print:length=2 maxn=5</span></span><br><span class="line">t=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,[<span class="number">5</span>]=<span class="string">&quot;e&quot;</span>&#125;</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;length=&quot;</span>..#t)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;maxn=&quot;</span>..<span class="built_in">table</span>.<span class="built_in">maxn</span>(t))</span><br></pre></td></tr></table></figure></li><li><p>table.insert(table,[pos,]value)</p><p>不是数组类型table时使用小心，获取的length会有问题</p></li><li><p>table.remove(table[,pos])</p><p>删除表元素，表长度改变</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">array = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> v == <span class="string">&quot;a&quot;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">remove</span>(array, i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- 并没有删除掉所有的a，原因是每一次删除完一个元素之后，array已经没有了那个值，再次遍历时的i其实已经是新array的i了</span></span><br><span class="line"><span class="comment">--[[ print:</span></span><br><span class="line"><span class="comment">1a</span></span><br><span class="line"><span class="comment">2b</span></span><br><span class="line"><span class="comment">3a</span></span><br><span class="line"><span class="comment">4b</span></span><br><span class="line"><span class="comment">]]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 所以这样删除 从后往前删除</span></span><br><span class="line">array = &#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i=#array,<span class="number">1</span>,<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="keyword">if</span> array[i] == <span class="string">&quot;a&quot;</span> <span class="keyword">then</span></span><br><span class="line">        <span class="built_in">table</span>.<span class="built_in">remove</span>(array, i)</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> i,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(array) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i,v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- print:1b 2b</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.table.remove(table,pos) 返回值为对应pos的值 pos为空时删除最后一个元素 删除结束移动元素位置</span></span><br><span class="line"><span class="comment">-- print:1a 2c 3d 1a 2c 3d 3 b</span></span><br><span class="line">mytable=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">n=<span class="built_in">table</span>.<span class="built_in">remove</span>(mytable,<span class="number">2</span>)</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(k..v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(k..v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(#mytable)</span><br><span class="line"><span class="built_in">print</span>(n)</span><br><span class="line"><span class="comment">-- 2.nil 直接元素置空 不会移动位置 表中会有个空洞 #或者table.getn()获取长度不行</span></span><br><span class="line"><span class="comment">-- print:1a 3c 4d 1a 4 nil</span></span><br><span class="line">mytable=&#123;<span class="string">&quot;a&quot;</span>,<span class="string">&quot;b&quot;</span>,<span class="string">&quot;c&quot;</span>,<span class="string">&quot;d&quot;</span>&#125;</span><br><span class="line">mytable[<span class="number">2</span>]=<span class="literal">nil</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(k..v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">ipairs</span>(mytable) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(k..v);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="built_in">print</span>(#mytable)</span><br><span class="line"><span class="built_in">print</span>(mytable[<span class="number">2</span>])</span><br></pre></td></tr></table></figure></li><li><p>table.sort(table[,comp])</p><p>排序，可以自定义排序规则</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">array = &#123;<span class="string">&quot;egg&quot;</span>,<span class="string">&quot;dophin&quot;</span>,<span class="string">&quot;ai&quot;</span>,<span class="string">&quot;con&quot;</span>,<span class="string">&quot;body&quot;</span>&#125;</span><br><span class="line"><span class="comment">-- print:egg dophin ai con body</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(array)</span><br><span class="line"><span class="comment">-- print:ai body con dophin egg</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">table</span>.<span class="built_in">sort</span>(array,<span class="function"><span class="keyword">function</span><span class="params">(e1,e2)</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">string</span>.<span class="built_in">len</span>(e1)&lt;<span class="built_in">string</span>.<span class="built_in">len</span>(e2)</span><br><span class="line"><span class="keyword">end</span>)</span><br><span class="line"><span class="comment">-- print:ai con egg body dophin</span></span><br></pre></td></tr></table></figure></li><li><p>table.concat(…)</p><p>以特定形式连接表中数据，只处理table中下标是数字，从1开始，连续不断开的数据</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">t=&#123;a=<span class="number">1</span>,<span class="number">8</span>,<span class="string">&quot;name&quot;</span>,[<span class="number">9</span>]=<span class="string">&quot;id&quot;</span>,<span class="string">&quot;age&quot;</span>,<span class="string">&quot;time&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">pairs</span>(t) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(v)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="comment">-- print:8  name  age  time  1  id</span></span><br><span class="line"></span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- print:8nameagetime</span></span><br><span class="line"><span class="comment">-- 只处理数字下标 下标从一开始 断开就结束</span></span><br><span class="line"></span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t,<span class="string">&quot;-&quot;</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- print:8-name-age-time</span></span><br><span class="line"><span class="comment">-- 第二个参数为连接字符串，默认连接字符串是空串</span></span><br><span class="line"></span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t,<span class="string">&quot;-&quot;</span>,<span class="number">2</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- print:name-age-time</span></span><br><span class="line"><span class="comment">-- 第三个参数为起始位置</span></span><br><span class="line"></span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t,<span class="string">&quot;-&quot;</span>,<span class="number">2</span>,<span class="number">3</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- print:name-age</span></span><br><span class="line"><span class="comment">-- 第四个参数为结束位置</span></span><br><span class="line"></span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t,<span class="string">&quot;-&quot;</span>,<span class="number">2</span>,<span class="number">5</span>)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- error</span></span><br><span class="line"><span class="comment">-- 真正符合连接的数据只有4个 报错</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">t=&#123;[<span class="number">1</span>]=<span class="string">&quot;a&quot;</span>,[<span class="number">2</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">3</span>]=<span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- print:abc</span></span><br><span class="line"></span><br><span class="line">t=&#123;[<span class="number">2</span>]=<span class="string">&quot;b&quot;</span>,[<span class="number">3</span>]=<span class="string">&quot;c&quot;</span>&#125;</span><br><span class="line">a=<span class="built_in">table</span>.<span class="built_in">concat</span>(t)</span><br><span class="line"><span class="built_in">print</span>(a)</span><br><span class="line"><span class="comment">-- print:(空串)</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/nb/4814025">https://www.jianshu.com/nb/4814025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;table库中函数针对的几乎都是数组类型的&lt;/p&gt;
&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot;</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-math</title>
    <link href="http://example.com/2022/02/19/Lua-math/"/>
    <id>http://example.com/2022/02/19/Lua-math/</id>
    <published>2022-02-19T06:41:38.477Z</published>
    <updated>2022-02-19T06:58:01.335Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">math</span>.<span class="built_in">abs</span>()   <span class="comment">-- 绝对值</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">max</span>()/<span class="built_in">math</span>.<span class="built_in">min</span>()<span class="comment">-- 返回最大/最小数</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">ceil</span>()/<span class="built_in">math</span>.<span class="built_in">floor</span>()<span class="comment">-- 向上取整/向下取整</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">fmod</span>()/<span class="built_in">math</span>.<span class="built_in">modf</span>()<span class="comment">-- 取余/返回数的整数和小数部分</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">random</span>([m[,n]])</span><br><span class="line"><span class="comment">-- 不传参 返回[0,1)一个参 返回[1,m]内整数两个参 返回[m,n]整数</span></span><br><span class="line"><span class="built_in">math</span>.<span class="built_in">randomseed</span>(x)<span class="comment">-- 随机数种子</span></span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/nb/4814025">https://www.jianshu.com/nb/4814025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;h3 id=&quot;实例&quot;&gt;&lt;a href=&quot;#实例&quot; class=&quot;headerlink&quot; title=&quot;实例&quot;&gt;&lt;/a&gt;实例&lt;/h3&gt;&lt;figur</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-基础</title>
    <link href="http://example.com/2022/02/19/Lua-%E5%9F%BA%E7%A1%80/"/>
    <id>http://example.com/2022/02/19/Lua-%E5%9F%BA%E7%A1%80/</id>
    <published>2022-02-19T06:41:38.477Z</published>
    <updated>2022-02-19T07:01:51.181Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>学习Lua记录</p><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 1.nil </span></span><br><span class="line"><span class="comment">-- 判断类型 类型名为字符串</span></span><br><span class="line"><span class="built_in">type</span>(x)==<span class="literal">nil</span><span class="literal">false</span></span><br><span class="line"><span class="built_in">type</span>(x)==<span class="string">&quot;nil&quot;</span><span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 2.boolean</span></span><br><span class="line"><span class="comment">-- false,nil都为假</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 3.number</span></span><br><span class="line"><span class="comment">-- 默认双精度浮点数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 4.string</span></span><br><span class="line"><span class="comment">-- 双引号或单引号 [[...]]表示一块字符串</span></span><br><span class="line"><span class="comment">-- 字符串长度 #string</span></span><br><span class="line">s=<span class="string">&quot;helloworld&quot;</span>;</span><br><span class="line"><span class="built_in">print</span>(#s);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 5.table</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 6.function</span></span><br><span class="line"><span class="comment">-- 匿名函数方式传参</span></span><br><span class="line"><span class="comment">-- f1.lua</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testFun</span><span class="params">(tab,fun)</span></span></span><br><span class="line">    <span class="keyword">for</span> k ,v <span class="keyword">in</span> <span class="built_in">pairs</span>(tab) <span class="keyword">do</span></span><br><span class="line">        <span class="built_in">print</span>(fun(k,v));</span><br><span class="line">    <span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- f2.lua </span></span><br><span class="line">tab=&#123;key1=<span class="string">&quot;val1&quot;</span>,key2=<span class="string">&quot;val2&quot;</span>&#125;;</span><br><span class="line">testFun(tab,</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(key,val)</span></span><span class="comment">--匿名函数</span></span><br><span class="line">    <span class="keyword">return</span> key..<span class="string">&quot;=&quot;</span>..val;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 7.thread</span></span><br><span class="line"><span class="comment">-- 用于协同程序多点</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 8.userdata</span></span><br><span class="line"><span class="comment">-- 自定义类型 一般C/C++的struct和指针调用</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="赋值"><a href="#赋值" class="headerlink" title="赋值"></a>赋值</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span> a,b=<span class="number">3</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">local</span> a,b=fun();</span><br><span class="line">a,b=b,a</span><br></pre></td></tr></table></figure><h3 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- while</span></span><br><span class="line">a=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(a&lt;<span class="number">5</span>) <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(a);</span><br><span class="line">a=a+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- for</span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">5</span>,<span class="number">1</span>,<span class="number">-1</span> <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- for fun()</span></span><br><span class="line"><span class="comment">-- fun()只在循环开始前执行一次</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span><span class="params">(x)</span></span>  </span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;fun&quot;</span>)  </span><br><span class="line">    <span class="keyword">return</span> x*<span class="number">2</span>   </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,f(<span class="number">5</span>) <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">print</span>(i)  </span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"><span class="comment">-- 输出：fun 1 2 3 4 5 6 7 8 9 10</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- for 数组 ipairs</span></span><br><span class="line">a = &#123;<span class="string">&quot;one&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;three&quot;</span>&#125;</span><br><span class="line"><span class="keyword">for</span> i, v <span class="keyword">in</span> <span class="built_in">ipairs</span>(a) <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">print</span>(i, v)</span><br><span class="line"><span class="keyword">end</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">-- for table pairs</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- break 退出</span></span><br></pre></td></tr></table></figure><h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 函数作为参数</span></span><br><span class="line">myprint = <span class="function"><span class="keyword">function</span><span class="params">(param)</span></span></span><br><span class="line">   <span class="built_in">print</span>(<span class="string">&quot;这是打印函数 -   ##&quot;</span>,param,<span class="string">&quot;##&quot;</span>)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span><span class="params">(num1,num2,functionPrint)</span></span></span><br><span class="line">   result = num1 + num2</span><br><span class="line">   functionPrint(result)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"></span><br><span class="line">myprint(<span class="number">10</span>)</span><br><span class="line">add(<span class="number">2</span>,<span class="number">5</span>,myprint)</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 可变参数函数</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span><span class="params">(...)</span></span>  </span><br><span class="line">    <span class="keyword">for</span> i = <span class="number">1</span>, <span class="built_in">select</span>(<span class="string">&#x27;#&#x27;</span>, ...) <span class="keyword">do</span>  <span class="comment">--&gt;获取参数总数</span></span><br><span class="line">        <span class="keyword">local</span> <span class="built_in">arg</span> = <span class="built_in">select</span>(i, ...); <span class="comment">--&gt;读取参数</span></span><br><span class="line">        <span class="built_in">print</span>(<span class="string">&quot;arg&quot;</span>, <span class="built_in">arg</span>);  </span><br><span class="line">    <span class="keyword">end</span>  </span><br><span class="line"><span class="keyword">end</span>  </span><br><span class="line"></span><br><span class="line">foo(<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>);  </span><br></pre></td></tr></table></figure><h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">and</span> <span class="keyword">or</span> <span class="keyword">not</span></span><br><span class="line">..(字符串连接)</span><br><span class="line">#(字符串或表长度)</span><br></pre></td></tr></table></figure><h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">s=<span class="string">&quot;helloworld&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 长度</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">len</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 拼接</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">rep</span>(s,<span class="number">3</span>);<span class="comment">--string重复三次</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 大小写转换</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">lower</span>(s);</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">upper</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 反转</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">reverse</span>(s);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 截取</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">sub</span>(s,i,j);</span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">sub</span>(s,j,<span class="number">-1</span>);<span class="comment">---1代表最后一个 -2倒数第二个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符转换</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">char</span>(<span class="number">97</span>,<span class="number">98</span>,<span class="number">99</span>);<span class="comment">--abc</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">byte</span>(<span class="string">&quot;abc&quot;</span>,<span class="number">2</span>);<span class="comment">--98</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 格式化</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%.4f&quot;</span>,<span class="built_in">math</span>.<span class="built_in">pi</span>)<span class="comment">--3.1416</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%02d/%02d/%04d&quot;</span>,<span class="number">1</span>,<span class="number">1</span>,<span class="number">1990</span>)<span class="comment">--01/01/1990</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">format</span>(<span class="string">&quot;%s&quot;</span>,<span class="string">&quot;hi&quot;</span>);<span class="comment">--hi</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 字符串匹配</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;wo&quot;</span>);<span class="comment">--6 7</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;wo&quot;</span>,<span class="number">5</span>);<span class="comment">--6 7</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">find</span>(s,<span class="string">&quot;%d&quot;</span>,<span class="number">1</span>);  <span class="comment">--nil%d表示查找数字</span></span><br><span class="line"><span class="comment">-- 返回第一个匹配字符串</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">match</span>(s,<span class="string">&quot;wo&quot;</span>);<span class="comment">--wo</span></span><br><span class="line"><span class="comment">-- 返回迭代器函数 每次调用返回一个符合条件的字符串</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">gmatch</span>(s,str);</span><br><span class="line">attrstr = <span class="string">&quot;from=world, to=Lua, name=AlbertS&quot;</span></span><br><span class="line"><span class="keyword">for</span> k,v <span class="keyword">in</span> <span class="built_in">string</span>.<span class="built_in">gmatch</span>(attrstr, <span class="string">&quot;(%w+)=(%w+)&quot;</span>) <span class="keyword">do</span> </span><br><span class="line">    <span class="built_in">print</span>(k, v) </span><br><span class="line"><span class="keyword">end</span><span class="comment">-- 返回key=value的字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 替换 返回替换后内容</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">gsub</span>(s,<span class="string">&quot;wo&quot;</span>,<span class="string">&quot;-&quot;</span>);<span class="comment">--hello-rld</span></span><br><span class="line"><span class="built_in">string</span>.<span class="built_in">gsub</span>(<span class="string">&quot;aaaa&quot;</span>,<span class="string">&quot;a&quot;</span>,<span class="string">&quot;z&quot;</span>,<span class="number">3</span>);<span class="comment">--zzza</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- string patterns</span></span><br><span class="line">.:所有字符</span><br><span class="line">%c:所有控制字符</span><br><span class="line">%p:所有标点符号</span><br><span class="line">%s:所有空白字符</span><br><span class="line">%w:所有字母和数字</span><br><span class="line"></span><br><span class="line">%a:所有字母</span><br><span class="line">%u:所有大写字母</span><br><span class="line">%l:所有小写字母</span><br><span class="line"></span><br><span class="line">%d:所有十进制数字</span><br><span class="line">%x:所有十六进制数字</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.jianshu.com/nb/4814025">https://www.jianshu.com/nb/4814025</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;学习Lua记录&lt;/p&gt;
&lt;h3 id=&quot;数据类型&quot;&gt;&lt;a href=&quot;#数据类型&quot; class=&quot;headerlink&quot; title=&quot;数据</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-冒号点号</title>
    <link href="http://example.com/2022/02/19/Lua-%E5%86%92%E5%8F%B7%E7%82%B9%E5%8F%B7/"/>
    <id>http://example.com/2022/02/19/Lua-%E5%86%92%E5%8F%B7%E7%82%B9%E5%8F%B7/</id>
    <published>2022-02-19T06:41:38.477Z</published>
    <updated>2022-02-19T07:01:55.122Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>关于冒号（:）与点号（.）</p><p>冒号自带隐藏self，点号不带self，方法用冒号</p><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class=&#123;x=1&#125;</span><br><span class="line"></span><br><span class="line">--冒号+方法</span><br><span class="line">function class:print()</span><br><span class="line">print(self.x);</span><br><span class="line">end</span><br><span class="line">--点号+self</span><br><span class="line">function class.print(self)</span><br><span class="line">print(self.x);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">--冒号调用</span><br><span class="line">class:print();</span><br><span class="line">--点号调用</span><br><span class="line">class.print(class);</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;p&gt;关于冒号（:）与点号（.）&lt;/p&gt;
&lt;p&gt;冒号自带隐藏self，点号不带self，方法用冒号&lt;/p&gt;
&lt;h3 id=&quot;示例&quot;&gt;&lt;a href</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>Lua-协程</title>
    <link href="http://example.com/2022/02/19/Lua-%E5%8D%8F%E7%A8%8B/"/>
    <id>http://example.com/2022/02/19/Lua-%E5%8D%8F%E7%A8%8B/</id>
    <published>2022-02-19T06:41:38.476Z</published>
    <updated>2022-02-19T07:01:58.359Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">co=<span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co));</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co));</span><br><span class="line"><span class="comment">--[[print:</span></span><br><span class="line"><span class="comment">suspended</span></span><br><span class="line"><span class="comment">hi</span></span><br><span class="line"><span class="comment">dead</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">co=<span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">for</span> i=<span class="number">1</span>,<span class="number">2</span> <span class="keyword">do</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;hi&quot;</span>);</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">yield</span>();</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co));</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co));</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co));</span><br><span class="line"></span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co);</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">status</span>(co));</span><br><span class="line"><span class="comment">--[[print:</span></span><br><span class="line"><span class="comment">hi</span></span><br><span class="line"><span class="comment">suspended</span></span><br><span class="line"><span class="comment">hi</span></span><br><span class="line"><span class="comment">suspended</span></span><br><span class="line"><span class="comment">dead</span></span><br><span class="line"><span class="comment">dead</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><h4 id="参数及返回值"><a href="#参数及返回值" class="headerlink" title="参数及返回值"></a>参数及返回值</h4><ul><li>create：返回coroutine，参数是函数</li><li>resume：返回bool值 </li><li>yield：挂起</li><li>status：返回状态</li><li>wrap：返回一个函数，调用这个函数时就开始执行，相当于create+resume</li><li>running：返回运行的coroutine</li></ul><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- bool + 函数返回参数</span></span><br><span class="line">co=<span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">()</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">4</span>,<span class="number">5</span>;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="comment">--[[print:</span></span><br><span class="line"><span class="comment">true 4 5</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- bool + 传入参数多少</span></span><br><span class="line">co=<span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="built_in">print</span>(a,b);</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">yield</span>();</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="comment">--[[print:</span></span><br><span class="line"><span class="comment">1 2 </span></span><br><span class="line"><span class="comment">true</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- bool + yield所有参数</span></span><br><span class="line">co=<span class="built_in">coroutine</span>.<span class="built_in">create</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(a,b)</span></span></span><br><span class="line"><span class="built_in">print</span>(a,b);</span><br><span class="line"><span class="built_in">coroutine</span>.<span class="built_in">yield</span>(a+b,a-b,a*b,a/b);</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line"><span class="built_in">print</span>(<span class="built_in">coroutine</span>.<span class="built_in">resume</span>(co,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>));</span><br><span class="line"><span class="comment">--[[print:</span></span><br><span class="line"><span class="comment">1 2</span></span><br><span class="line"><span class="comment">true 3 -1 2 0.5--所有传递给yield的参数都将返回</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- wrap</span></span><br><span class="line">co=<span class="built_in">coroutine</span>.<span class="built_in">wrap</span>(</span><br><span class="line"><span class="function"><span class="keyword">function</span><span class="params">(a)</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">2</span>*a;</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line">)</span><br><span class="line">c=co(<span class="number">1</span>);</span><br><span class="line"><span class="built_in">print</span>(c);</span><br><span class="line"><span class="comment">--[[print:</span></span><br><span class="line"><span class="comment">2</span></span><br><span class="line"><span class="comment">]]</span></span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;简介&quot;&gt;&lt;a href=&quot;#简介&quot; class=&quot;headerlink&quot; title=&quot;简介&quot;&gt;&lt;/a&gt;简介&lt;/h3&gt;&lt;h3 id=&quot;示例&quot;&gt;&lt;a href=&quot;#示例&quot; class=&quot;headerlink&quot; title=&quot;示例&quot;&gt;&lt;/a&gt;示例&lt;/h3&gt;&lt;figur</summary>
      
    
    
    
    <category term="Lua" scheme="http://example.com/categories/Lua/"/>
    
    
  </entry>
  
  <entry>
    <title>C#接口</title>
    <link href="http://example.com/2022/02/19/CSharp%E6%8E%A5%E5%8F%A3/"/>
    <id>http://example.com/2022/02/19/CSharp%E6%8E%A5%E5%8F%A3/</id>
    <published>2022-02-19T06:41:38.464Z</published>
    <updated>2022-02-19T07:00:41.028Z</updated>
    
    <content type="html"><![CDATA[<p>继承接口后，我们需要实现接口的方法 MethodToImplement() , 方法名必须与接口定义的方法名一致</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">using System;</span><br><span class="line"></span><br><span class="line">interface IMyInterface</span><br><span class="line">&#123;</span><br><span class="line">    // 接口成员</span><br><span class="line">    void MethodToImplement();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class InterfaceImplementer : IMyInterface</span><br><span class="line">&#123;</span><br><span class="line">    static void Main()</span><br><span class="line">    &#123;</span><br><span class="line">        InterfaceImplementer iImp = new InterfaceImplementer();</span><br><span class="line">        iImp.MethodToImplement();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void MethodToImplement()</span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(&quot;MethodToImplement() called.&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;继承接口后，我们需要实现接口的方法 MethodToImplement() , 方法名必须与接口定义的方法名一致&lt;/p&gt;
&lt;figure class=&quot;highlight plaintext&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span</summary>
      
    
    
    
    <category term="C#" scheme="http://example.com/categories/C/"/>
    
    
  </entry>
  
</feed>
